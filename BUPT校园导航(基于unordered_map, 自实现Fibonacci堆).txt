#include<iostream>
#include<unordered_map>

#define OK 1
#define ERROR -1

/*
 * 斐波那契堆实现（用于Dijkstra算法优化）
 * 包含节点合并、级联剪切等特性，支持快速插入、提取最小值和减少键值操作
 */
class FibHeap {
    using key_type = unsigned long long;   // 键类型（用于存储距离值）
    using value_type = size_t;             // 值类型（存储顶点索引）

    // 斐波那契堆节点定义
    class FibNode {
    public:
        key_type key;        // 节点键值（路径长度）
        value_type value;    // 节点存储的值（顶点索引）
        FibNode* left;       // 左兄弟节点（循环双向链表）
        FibNode* right;      // 右兄弟节点（循环双向链表）
        FibNode* parent;     // 父节点指针
        FibNode* child;      // 子节点指针
        bool mark;           // 标记位（用于级联剪切）
        int degree;          // 子节点数量

        FibNode(key_type key = key_type(), value_type value = value_type(),
            FibNode* left = nullptr, FibNode* right = nullptr)
            :key(key), value(value), left(left), right(right),
            parent(nullptr), child(nullptr), mark(false), degree(0) { ; }
    };

    int size;        // 堆中节点总数
    int n_roots;     // 根链表节点数
    FibNode* min;    // 当前最小节点指针
    std::unordered_map<value_type, FibNode*> hashtable; // 值到节点的哈希映射

public:
    FibHeap() : size(0), n_roots(0), min(NULL) {}

    // 堆是否为空判断
    bool empty() { return min == NULL; }

    // 获取最小节点存储的值（顶点索引）
    value_type get_min() { return min->value; }

private:
    // 将节点追加到循环双向链表中
    void __append(FibNode*& head, FibNode* node) {
        if (head == NULL) {  // 空链表初始化
            head = node;
            head->left = head;
            head->right = head;
        }
        else {  // 插入到链表尾部
            node->left = head->left;
            node->right = head;
            node->left->right = node;
            node->right->left = node;
        }
    }

public:
    // 插入新节点到堆中
    void insert(key_type key, value_type value) {
        __append(min, new FibNode(key, value));  // 创建新节点并插入根链表
        hashtable[value] = min->left;            // 更新哈希表
        if (min->left->key < min->key)           // 更新最小值指针
            min = min->left;
        size++;
        n_roots++;
    }

private:
    // 合并两个堆树，返回合并后的根节点
    FibNode* __merge(FibNode* a, FibNode* b) {
        // 确保a是较小根
        if (a->key > b->key) {
            FibNode* tmp = a;
            a = b;
            b = tmp;
        }
        // 将b作为a的子节点
        if (a->child == nullptr) {  // a没有子节点的情况
            a->child = b;
            b->left = b;
            b->right = b;
            b->parent = a;
        }
        else { // 插入到子链表尾部
            b->left = a->child->left;
            b->right = a->child;
            b->left->right = b;
            b->right->left = b;
            b->parent = a;
        }
        a->degree++; // 更新度数
        return a;
    }

    // 合并相同度数的堆树（维护堆性质）
    void __insert(std::unordered_map<int, FibNode*>& roots, FibNode* node) {
        int deg = node->degree;
        if (roots[deg] == nullptr)
            roots[deg] = node;
        else {
            __insert(roots, __merge(node, roots[deg]));
            roots[deg] = nullptr;
        }
    }

public:
    // 提取最小节点（核心操作）
    void extract_min() {
        if (min == nullptr)
            return;

        // 将最小节点的子节点提升到根链表
        for (FibNode* cur = min->child; min->degree != 0; min->degree--) {
            FibNode* tmp = cur->right;
            cur->right = cur->right->right;
            __append(min, tmp); // 插入子节点到根链表
            tmp->parent = nullptr;
            n_roots++;
        }

        // 移除最小节点
        hashtable.erase(min->value);
        min->left->right = min->right;
        min->right->left = min->left;

        FibNode* old_min = min; // 更新临时min指针
        min = min->left;
        if (min == old_min)
            min = nullptr;
        delete old_min;
        size--;
        n_roots--;

        // 合并相同度数的堆树
        std::unordered_map<int, FibNode*>roots;
        for (FibNode* cur = min; n_roots != 0; n_roots--) {
            FibNode* tmp = cur;
            cur = cur->right;
            __insert(roots, tmp);
        }

        // 重建根链表并找到新最小值
        min = nullptr;
        for (auto root : roots) {
            if (root.second != nullptr) {
                __append(min, root.second);
                if (min->left->key < min->key)
                    min = min->left;
                n_roots++;
            }
        }
    }

private:
    // 级联剪切操作（维护堆性质）
    void cut_out(FibNode* node) {
        __append(min, node);    // 提升节点到根链表
        node->mark = false;     // 重置标记

        if (min->left->key < min->key)
            min = min->left;
        n_roots++;
        if (node->parent->mark == false)
            node->parent->mark = true;  // 标记父节点
        else
            cut_out(node->parent);      // 递归剪切
        node->parent = nullptr;
    }

public:
    // 减少节点键值（Dijkstra算法关键操作）
    void decrease_key(value_type value, key_type new_key) {
        FibNode* target = hashtable[value];
        if (target == nullptr) {    // 处理未找到的情况
            insert(new_key, value);
            return;
        }
        // 减小 key 值
        target->key = new_key;
        // 如果没有破坏堆属性, 则跳出
        if (target->parent == nullptr || target->parent->key < target->key)
            return;
        // 调用 cut_out 递归地调整堆属性
        cut_out(target);
    }
};

/*
 * 图结构实现（使用邻接多重表）
 * 支持顶点和边的插入，以及Dijkstra最短路径算法
 */
class Graph {
    using vertex_index_type = size_t;      // 顶点索引类型
    using weigh_type = unsigned long long; // 权重类型

    // 边节点定义（邻接多重表）
    class EdgeNode {
    public:
        vertex_index_type u, v;    // 边的两个顶点
        weigh_type weigh;          // 边权重
        EdgeNode* u_next;          // u顶点的下一条边
        EdgeNode* v_next;          // v顶点的下一条边
        EdgeNode(vertex_index_type u, vertex_index_type v, weigh_type weigh = 1,
            EdgeNode* u_next = nullptr, EdgeNode* v_next = nullptr)
            :u(u), v(v), weigh(weigh), u_next(u_next), v_next(v_next) { ; }
    };

    // 顶点节点定义
    class VNode {
    public:
        std::string name;    // 顶点名称（地点名称）
        EdgeNode* first;     // 关联的第一条边

        VNode(const std::string name = std::string()) :name(name), first(nullptr) { ; }
    };

    VNode* adj_list;       // 邻接表数组
    vertex_index_type vexnum, edgenum, capacity;  // 顶点数、边数、容量
    std::unordered_map<std::string, vertex_index_type> hashtable; // 名称到索引的映射
    
    bool is_prime(unsigned long long n) {
        if (n <= 1)
            return false;
        if (n == 2)
            return true;
        if (n % 2 == 0)
            return false;
        for (unsigned long long i = 3; i <= n / i; i += 2)
            if (n % i == 0)
                return false;
        return true;
    }

    bool adjacent(vertex_index_type u, vertex_index_type v) {
        for (EdgeNode* cur = adj_list[u].first; cur; ) {
            if (cur->u == u) {
                if (cur->v == v)
                    return true;
                cur = cur->u_next;
            }
            else if (cur->v == u) {
                if (cur->u == v)
                    return true;
                cur = cur->v_next;
            }
            else {
                std::cerr << "邻接多重表内部逻辑错误\n";
                exit(ERROR);
            }
        }
        return false;
    }

    weigh_type get_edge_weigh(vertex_index_type u, vertex_index_type v) {
        for (EdgeNode* cur = adj_list[u].first; cur; ) {
            if (cur->u == u) {
                if (cur->v == v)
                    return cur->weigh;
                cur = cur->u_next;
            }
            else if (cur->v == u) {
                if (cur->u == v)
                    return cur->weigh;
                cur = cur->v_next;
            }
            else {
                std::cerr << "邻接多重表内部逻辑错误\n";
                exit(ERROR);
            }
        }
        return ERROR;
    }

    // 辅助方法：查找顶点索引
    vertex_index_type find_vertex(const std::string name) {
        if (hashtable.find(name) == hashtable.end())
            return ERROR;
        return hashtable[name];
    }

public:
    // 构造函数（初始化指定容量的图）
    Graph(vertex_index_type capacity = 1) { // 非负权简单图
        if (capacity > _CRT_SIZE_MAX / sizeof(VNode) || capacity == 0) {
            std::cerr << "图创建失败, 顶点数" << capacity << "非法\n";
            exit(OVERFLOW);
        }
        adj_list = new VNode[capacity];
        vexnum = 0;
        edgenum = 0;
        this->capacity = capacity;
    }

    // 插入顶点（地点）
    int insert_vertex(const std::string name) {
        if (find_vertex(name) != ERROR) {
            std::cerr << "插入顶点" << name << "失败, 顶点" << name << "已存在\n";
            return ERROR;
        }
        if (vexnum >= capacity) {
            std::cerr << "插入顶点" << name << "失败, 图已满\n";
            return ERROR;
        }
        if (hashtable.find(name) != hashtable.end()) {
            std::cerr << "插入顶点" << name << "失败, 未能成功将键值对 ( " << name << ", " << vexnum << " ) 插入哈希表\n";
            return ERROR;
        }
        hashtable[name] = vexnum;
        adj_list[vexnum++] = VNode(name);
        std::cout << "插入顶点" << name << "成功\n";
        return OK;
    }

    // 添加边（路径）
    weigh_type add_edge(const std::string x, const std::string y) {
        if (edgenum == ULLONG_MAX) {
            std::cerr << "插入边 { " << x << ", " << y << " } 失败, 插入后边数" << edgenum << "将溢出\n";
            return ERROR;
        }
        vertex_index_type u = find_vertex(x);
        if (u == ERROR) {
            std::cerr << "插入边 { " << x << ", " << y << " } 失败, 顶点" << x << "不存在\n";
            return ERROR;
        }
        vertex_index_type v = find_vertex(y);
        if (v == ERROR) {
            std::cerr << "插入边 { " << x << ", " << y << " } 失败, 顶点" << y << "不存在\n";
            return ERROR;
        }
        if (adjacent(u, v)) {
            std::cerr << "插入边 { " << x << ", " << y << " } 失败, 边 { " << x << ", " << y << " } 已存在\n";
            return ERROR;
        }

        // 创建新边并插入两个顶点的邻接表
        EdgeNode* new_node = new EdgeNode(u, v, 1, adj_list[u].first, adj_list[v].first);
        adj_list[u].first = new_node;
        adj_list[v].first = new_node;
        edgenum++;
        std::cerr << "插入边 { " << x << ", " << y << " } 成功\n";
        return OK;
    }

    // Dijkstra最短路径算法实现
    weigh_type dijkstra(const std::string src, const std::string dst) {
        vertex_index_type srcidx = find_vertex(src);
        if (srcidx == ERROR) {
            std::cerr << "寻找从" << src << "到" << dst << "的最短路径失败, 顶点" << src << "不存在\n";
            return ERROR;
        }
        vertex_index_type dstidx = find_vertex(dst);
        if (dstidx == ERROR) {
            std::cerr << "寻找从" << src << "到" << dst << "的最短路径失败, 顶点" << dst << "不存在\n";
            return ERROR;
        }
        if (srcidx == dstidx) {
            std::cout << "从" << src << "到" << dst << "的最短路径为: " << src << "->" << dst << "\n";
            return 0;
        }
        if (edgenum == 0) { // 零图
            std::cerr << "不存在从" << src << "到" << dst << "的路径\n";
            return ERROR;
        }
        if (vexnum > _CRT_SIZE_MAX / sizeof(weigh_type)) {
            std::cerr << "寻找从" << src << "到" << dst << "的最短路径失败, 图的顶点数" << vexnum << "太大, 无法计算\n";
            return ERROR;
        }

        // 初始化数据结构
        weigh_type* dist = new weigh_type[vexnum];
        bool* final = new bool[vexnum];
        vertex_index_type* next = new vertex_index_type[vexnum];

        std::fill(dist, dist + vexnum, ULLONG_MAX);
        std::fill(final, final + vexnum, false);
        std::fill(next, next + vexnum, ERROR);

        dist[dstidx] = 0; // 从 dst 开始反向寻找
        FibHeap pq; // (key = dist, value = idx)
        pq.insert(0, dstidx); // 从节点 dst 开始处理

        while (true) { // begin dijkstra
            if (pq.empty()) { // 优先队列为空, 这表明已经没有能处理的节点了, 且还没到达 src
                std::cerr << "不存在从" << src << "到" << dst << "的路径\n";
                return ERROR;
            }
            vertex_index_type u = pq.get_min(); // 待处理节点下标
            pq.extract_min();

            if (u == srcidx) // 已经到达 src
                break; // 成功退出 dijkstra 算法
            final[u] = true;

            for (EdgeNode* cur = adj_list[u].first; cur; ) { // 遍历 u 的所有邻接节点
                vertex_index_type v; // u 的邻接节点下标
                if (cur->u == u) {
                    v = cur->v;
                    cur = cur->u_next;
                }
                else if (cur->v == u) {
                    v = cur->u;
                    cur = cur->v_next;
                }
                else {
                    std::cerr << "邻接多重表内部逻辑错误\n";
                    exit(ERROR);
                }
                weigh_type value = get_edge_weigh(u, v);

                if (dist[v] > dist[u] + value) { // 更新 dist[v]
                    dist[v] = dist[u] + value;
                    next[v] = u;
                    pq.decrease_key(v, dist[v]);  // 更新优先队列
                    std::cout << "从" << adj_list[u].name << "更新" << adj_list[v].name << "长度为" << dist[v] << "\n";
                }
            } // 遍历 u 的所有邻接节点
        } // end dijkstra

        // 输出路径结果
        std::cout << "从" << src << "到" << dst << "的最短路径为: " << adj_list[srcidx].name;
        for (vertex_index_type curidx = srcidx; curidx != dstidx; ) {
            curidx = next[curidx];
            std::cout << "->" << adj_list[curidx].name;
        }
        std::cout << '\n';

        weigh_type res = dist[srcidx];
        delete[] dist, final, next;
        return res;
    }

    // 析构函数（清理内存）
    ~Graph() {
        // 清理所有边节点
        for (vertex_index_type u = 0; u < vexnum; u++) { // 遍历每个节点 u , 并删除 u 的所有边, 采用头删法
            for (EdgeNode* target = adj_list[u].first; target; target = adj_list[u].first) { // 遍历节点 u 的所有边
                if (target->u != u) { // 交换target的 u 与 v
                    vertex_index_type	tmp_int = target->u;
                    target->u = target->v;
                    target->v = tmp_int;
                    EdgeNode* tmp_ptr = target->u_next;
                    target->u_next = target->v_next;
                    target->v_next = tmp_ptr;
                }
                if (target->u != u) { // u 的边的顶点没有 u
                    std::cerr << "邻接多重表内部逻辑错误\n";
                    exit(ERROR);
                }
                adj_list[target->u].first = target->u_next; // 更新 u 的邻接表的头结点
                if (adj_list[target->v].first == target) // 该边恰好也是 v 的邻接表的头结点
                    adj_list[target->v].first = target->v_next; // 更新 v 的邻接表的头结点
                else { // 该边不是 v 的邻接表的头结点
                    for (EdgeNode* pre = adj_list[target->v].first; ; ) { // 遍历 v 的所有边
                        if (pre->u == target->v) {
                            if (pre->u_next == target) { // 找到了待删除节点, 即该边也是 u 的边
                                if (pre->u == pre->u_next->u)
                                    pre->u_next = pre->u_next->u_next;
                                else if (pre->u == pre->u_next->v)
                                    pre->u_next = pre->u_next->v_next;
                                else { // u 的边的顶点没有 u
                                    std::cerr << "邻接多重表内部逻辑错误\n";
                                    exit(ERROR);
                                }
                                break;
                            }
                            pre = pre->u_next;
                        }
                        else if (pre->v == target->v) {
                            if (pre->v_next == target) { // 找到了待删除节点, 即该边也是 u 的边
                                if (pre->v == pre->v_next->u)
                                    pre->v_next = pre->v_next->u_next;
                                else if (pre->v == pre->v_next->v)
                                    pre->v_next = pre->v_next->v_next;
                                else { // u 的边的顶点没有 u
                                    std::cerr << "邻接多重表内部逻辑错误\n";
                                    exit(ERROR);
                                }
                                break;
                            }
                            pre = pre->v_next;
                        }
                        else { // v 的边的顶点没有 v
                            std::cerr << "邻接多重表内部逻辑错误\n";
                            exit(ERROR);
                        }
                        if (pre == nullptr) { // 在 v 的边中没找到边 { u, v } , 而在 u 的边中找到了边 { u, v } 
                            std::cerr << "邻接多重表内部逻辑错误\n";
                            exit(ERROR);
                        }
                    } // 遍历 v 的所有边
                } // 该边不是 v 的邻接表的头结点
                delete target; // 删除该边
            } // 遍历节点 u 的所有边
        } // 遍历每个节点 u , 并删除 u 的所有边, 采用头删法
        delete[] adj_list;
    }
};

void create_graph(Graph& graph);

#define MAX_NODE_COUNT 56

/*
 * 主程序：校园导航系统
 * 包含地图初始化和用户交互界面
 */
int main() {
    Graph graph(MAX_NODE_COUNT);

    // 初始化地图数据
    std::cout << "-------加载学校地图中-------\n";
    create_graph(graph);  // 具体初始化逻辑在create_graph函数
    std::cout << "-------加载完毕-------\n";
    system("pause");
    system("cls");

    // 用户交互循环
    std::string src, dst;
    while (true) {
        std::cout << "-------校园导航系统-------\n";
        std::cout << "请输入起点(输入\"quit\"表示退出): ";
        std::cin >> src;
        if (src == "quit")
            break;
        std::cout << "请输入终点(输入\"quit\"表示退出): ";
        if (dst == "quit")
            break;
        std::cin >> dst;
        int length = graph.dijkstra(src, dst);
        if (length != ERROR) {
            std::cout << "从" << src << "到" << dst << "的最短路径长度为: " << length;
            if (length != 0)
                std::cout << "00m";
            std::cout << "\n";
        }
        system("pause");
        system("cls");
    }
    return 0;
}

void insert_line(Graph& graph, const std::string* line, int size) {
    graph.insert_vertex(line[0]);
    for (int i = 1; i < size; i++) {
        graph.insert_vertex(line[i]);
        graph.add_edge(line[i - 1], line[i]);
    }
}

void create_graph(Graph& graph) {
    std::string line_1[] = { "元大都遗址公园", "西门", "校训石", "主席像", "主路", "主楼", "科学会堂", "操场" };
    insert_line(graph, line_1, 8);
    std::string line_2[] = { "西门", "鸿通楼", "教四", "财务处", "教一", "北邮体育馆", "科学会堂", "创新楼", "教二", "中门邮局", "教三", "国院", "西门" };
    insert_line(graph, line_2, 13);
    std::string line_3[] = { "校车站", "教三", "校训石", "教四", "学一", "学三", "学五", "留学生宿舍" };
    insert_line(graph, line_3, 8);
    std::string line_4[] = { "学二", "学四", "学八", "新食堂", "学十", "北邮科技大厦" };
    insert_line(graph, line_4, 6);
    std::string line_5[] = { "学三", "学四", "学发", "档案馆", "矮子食堂", "综合服务楼", "学六" };
    insert_line(graph, line_5, 7);
    std::string line_6[] = { "学十三", "学一", "学二", "图书馆", "小白楼", "球场", "学二十九", "东门" };
    insert_line(graph, line_6, 8);
    std::string line_7[] = { "学五", "学八", "麦当劳", "物美", "矮子食堂", "老食堂", "保卫处" };
    insert_line(graph, line_7, 7);
    std::string line_8[] = { "北门", "邮驿站", "经管", "学活", "麦当劳", "学发", "图书馆", "财务处", "主路", "中门邮局", "校医院", "南门平房", "南门" };
    insert_line(graph, line_8, 13);
    std::string line_9[] = { "档案馆", "小白楼", "教一", "主楼", "教二" };
    insert_line(graph, line_9, 5);
    std::string mingguang_line[] = { "中门邮局", "幼儿园", "北邮附中", "明光楼" };
    insert_line(graph, mingguang_line, 4);
    std::string researh_building_express[] = { "主路", "教一", "球场", "老食堂", "京东", "新科研楼", "老食堂" };
    insert_line(graph, researh_building_express, 7);
}